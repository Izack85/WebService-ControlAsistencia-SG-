//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Integra.Service.Test.svcSoluglob_Integra {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="svcSoluglob_Integra.ISoluglob_Integra")]
    public interface ISoluglob_Integra {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoluglob_Integra/InsertEmpleado", ReplyAction="http://tempuri.org/ISoluglob_Integra/InsertEmpleadoResponse")]
        bool InsertEmpleado(Integra.Services.Entities.QProcess.Empleados.QProcessKaizen EmpleadoQP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoluglob_Integra/InsertEmpleado", ReplyAction="http://tempuri.org/ISoluglob_Integra/InsertEmpleadoResponse")]
        System.Threading.Tasks.Task<bool> InsertEmpleadoAsync(Integra.Services.Entities.QProcess.Empleados.QProcessKaizen EmpleadoQP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoluglob_Integra/GetOneEmpleado", ReplyAction="http://tempuri.org/ISoluglob_Integra/GetOneEmpleadoResponse")]
        Integra.Services.Entities.Kaizen.Empleados.Empleado GetOneEmpleado(string Compania, string NumEmpleado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoluglob_Integra/GetOneEmpleado", ReplyAction="http://tempuri.org/ISoluglob_Integra/GetOneEmpleadoResponse")]
        System.Threading.Tasks.Task<Integra.Services.Entities.Kaizen.Empleados.Empleado> GetOneEmpleadoAsync(string Compania, string NumEmpleado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoluglob_Integra/GetAllEmpleado", ReplyAction="http://tempuri.org/ISoluglob_Integra/GetAllEmpleadoResponse")]
        System.Collections.Generic.List<Integra.Services.Entities.Kaizen.Empleados.Empleado> GetAllEmpleado();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoluglob_Integra/GetAllEmpleado", ReplyAction="http://tempuri.org/ISoluglob_Integra/GetAllEmpleadoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integra.Services.Entities.Kaizen.Empleados.Empleado>> GetAllEmpleadoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoluglob_Integra/UpdateEmpleado", ReplyAction="http://tempuri.org/ISoluglob_Integra/UpdateEmpleadoResponse")]
        string UpdateEmpleado(Integra.Services.Entities.Kaizen.Empleados.Empleado Empleado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoluglob_Integra/UpdateEmpleado", ReplyAction="http://tempuri.org/ISoluglob_Integra/UpdateEmpleadoResponse")]
        System.Threading.Tasks.Task<string> UpdateEmpleadoAsync(Integra.Services.Entities.Kaizen.Empleados.Empleado Empleado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoluglob_Integra/DeleteEmpleado", ReplyAction="http://tempuri.org/ISoluglob_Integra/DeleteEmpleadoResponse")]
        void DeleteEmpleado(string Compania, string NumEmpleado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoluglob_Integra/DeleteEmpleado", ReplyAction="http://tempuri.org/ISoluglob_Integra/DeleteEmpleadoResponse")]
        System.Threading.Tasks.Task DeleteEmpleadoAsync(string Compania, string NumEmpleado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoluglob_Integra/InsertEmpleadoSG", ReplyAction="http://tempuri.org/ISoluglob_Integra/InsertEmpleadoSGResponse")]
<<<<<<< local
        bool InsertEmpleadoSG(Integra.Services.Entities.QProcess.Empleados.QProcessKaizen EmpleadoQP);
=======
        int InsertEmpleadoSG(Integra.Services.Entities.QProcess.QProcessSoluglob EmpleadoQP);
>>>>>>> other
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoluglob_Integra/InsertEmpleadoSG", ReplyAction="http://tempuri.org/ISoluglob_Integra/InsertEmpleadoSGResponse")]
<<<<<<< local
        System.Threading.Tasks.Task<bool> InsertEmpleadoSGAsync(Integra.Services.Entities.QProcess.Empleados.QProcessKaizen EmpleadoQP);
=======
        System.Threading.Tasks.Task<int> InsertEmpleadoSGAsync(Integra.Services.Entities.QProcess.QProcessSoluglob EmpleadoQP);
>>>>>>> other
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoluglob_Integra/GetOneEmpleadoSG", ReplyAction="http://tempuri.org/ISoluglob_Integra/GetOneEmpleadoSGResponse")]
<<<<<<< local
        Integra.Services.Entities.QProcess.Empleados.QProcessSoluglob GetOneEmpleadoSG(int IdEntrevistaCandidato);
=======
        int GetOneEmpleadoSG(int IdEntrevistaCandidato);
>>>>>>> other
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoluglob_Integra/GetOneEmpleadoSG", ReplyAction="http://tempuri.org/ISoluglob_Integra/GetOneEmpleadoSGResponse")]
<<<<<<< local
        System.Threading.Tasks.Task<Integra.Services.Entities.QProcess.Empleados.QProcessSoluglob> GetOneEmpleadoSGAsync(int IdEntrevistaCandidato);
=======
        System.Threading.Tasks.Task<int> GetOneEmpleadoSGAsync(int IdEntrevistaCandidato);
>>>>>>> other
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISoluglob_IntegraChannel : Integra.Service.Test.svcSoluglob_Integra.ISoluglob_Integra, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Soluglob_IntegraClient : System.ServiceModel.ClientBase<Integra.Service.Test.svcSoluglob_Integra.ISoluglob_Integra>, Integra.Service.Test.svcSoluglob_Integra.ISoluglob_Integra {
        
        public Soluglob_IntegraClient() {
        }
        
        public Soluglob_IntegraClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Soluglob_IntegraClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Soluglob_IntegraClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Soluglob_IntegraClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InsertEmpleado(Integra.Services.Entities.QProcess.Empleados.QProcessKaizen EmpleadoQP) {
            return base.Channel.InsertEmpleado(EmpleadoQP);
        }
        
        public System.Threading.Tasks.Task<bool> InsertEmpleadoAsync(Integra.Services.Entities.QProcess.Empleados.QProcessKaizen EmpleadoQP) {
            return base.Channel.InsertEmpleadoAsync(EmpleadoQP);
        }
        
        public Integra.Services.Entities.Kaizen.Empleados.Empleado GetOneEmpleado(string Compania, string NumEmpleado) {
            return base.Channel.GetOneEmpleado(Compania, NumEmpleado);
        }
        
        public System.Threading.Tasks.Task<Integra.Services.Entities.Kaizen.Empleados.Empleado> GetOneEmpleadoAsync(string Compania, string NumEmpleado) {
            return base.Channel.GetOneEmpleadoAsync(Compania, NumEmpleado);
        }
        
        public System.Collections.Generic.List<Integra.Services.Entities.Kaizen.Empleados.Empleado> GetAllEmpleado() {
            return base.Channel.GetAllEmpleado();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integra.Services.Entities.Kaizen.Empleados.Empleado>> GetAllEmpleadoAsync() {
            return base.Channel.GetAllEmpleadoAsync();
        }
        
        public string UpdateEmpleado(Integra.Services.Entities.Kaizen.Empleados.Empleado Empleado) {
            return base.Channel.UpdateEmpleado(Empleado);
        }
        
        public System.Threading.Tasks.Task<string> UpdateEmpleadoAsync(Integra.Services.Entities.Kaizen.Empleados.Empleado Empleado) {
            return base.Channel.UpdateEmpleadoAsync(Empleado);
        }
        
        public void DeleteEmpleado(string Compania, string NumEmpleado) {
            base.Channel.DeleteEmpleado(Compania, NumEmpleado);
        }
        
        public System.Threading.Tasks.Task DeleteEmpleadoAsync(string Compania, string NumEmpleado) {
            return base.Channel.DeleteEmpleadoAsync(Compania, NumEmpleado);
        }
        
<<<<<<< local
        public bool InsertEmpleadoSG(Integra.Services.Entities.QProcess.Empleados.QProcessKaizen EmpleadoQP) {
=======
        public int InsertEmpleadoSG(Integra.Services.Entities.QProcess.QProcessSoluglob EmpleadoQP) {
>>>>>>> other
            return base.Channel.InsertEmpleadoSG(EmpleadoQP);
        }
        
<<<<<<< local
        public System.Threading.Tasks.Task<bool> InsertEmpleadoSGAsync(Integra.Services.Entities.QProcess.Empleados.QProcessKaizen EmpleadoQP) {
=======
        public System.Threading.Tasks.Task<int> InsertEmpleadoSGAsync(Integra.Services.Entities.QProcess.QProcessSoluglob EmpleadoQP) {
>>>>>>> other
            return base.Channel.InsertEmpleadoSGAsync(EmpleadoQP);
        }
        
<<<<<<< local
        public Integra.Services.Entities.QProcess.Empleados.QProcessSoluglob GetOneEmpleadoSG(int IdEntrevistaCandidato) {
=======
        public int GetOneEmpleadoSG(int IdEntrevistaCandidato) {
>>>>>>> other
            return base.Channel.GetOneEmpleadoSG(IdEntrevistaCandidato);
        }
        
<<<<<<< local
        public System.Threading.Tasks.Task<Integra.Services.Entities.QProcess.Empleados.QProcessSoluglob> GetOneEmpleadoSGAsync(int IdEntrevistaCandidato) {
=======
        public System.Threading.Tasks.Task<int> GetOneEmpleadoSGAsync(int IdEntrevistaCandidato) {
>>>>>>> other
            return base.Channel.GetOneEmpleadoSGAsync(IdEntrevistaCandidato);
        }
    }
}
